ggplot(plotVar,aes(x=Type,y=VaR,fill=Ticker))+geom_bar(stat = "identity",position="dodge")
install.packages("techila")
install.packages("rJava")
library(neuralnet)
MexVal<-getSymbols("BOLSAA.MX",src="yahoo",auto.assign = F)
View(MexVal)
Bimbo<-getSymbols("BIMBOA.MX",src="yahoo",auto.assign = F)
Bimbo<-na.omit(getSymbols("BIMBOA.MX",src="yahoo",auto.assign = F))
View(Bimbo)
summary(Bimbo)
View(Bimbo)
head(Bimbo)
tail(Bimbo)#
length(Bimbo)
colnames(Bimbo)<-c("Open","High","Low","Close","Volume","Adjusted")
plot(Ad(Bimbo),type = 'l',col="red")
View(Bimbo)
dim(df)
dim(Bimbo)
sapply(df, class)
plot(Op(Bimbo),type = 'l',col="blue")
plot(Bimbo$High,type = 'l',col="green")
plot(Bimbo$Low,type = 'l',col="deeppink")
plot(Ad(Bimbo),type = 'l',col="red")
plot(Op(Bimbo),type = 'l',col="blue")
lines(Bimbo$High,type = 'l',col="green")
lines(Bimbo$Low,type = 'l',col="deeppink")
lines(Ad(Bimbo),type = 'l',col="red")
plot(Op(Bimbo),type = 'l',col="blue")
plot(Ad(Bimbo),type = 'l',col="red")
plot(Bimbo$High,type = 'l',col="green")
lines(Bimbo$Low,type = 'l',col="deeppink")
?str
str(Bimbo)
hist(Bimbo)
hist(Bimbo$Close)
hist(Bimbo$Volume)
head(Bimbo,2,range)
head(Bimbo)
apply(Bimbo,2,range)
minValue<-apply(Bimbo,2,min)
minValue
minValue<-apply(Bimbo,min)
minValue<-apply(Bimbo,2,min)
set.seed(30)
maxValue<-apply(Bimbo, 2, max)
maxValue
set.seed(30)
t1<-sample(1:nrow(Bimbo),1950)
tr1<-Bimbo[t1,]
dim(tr1)
#Test data
te1<-Bimbo[-t1,]
dim(te1)
Bimbo1<-as.data.frame(scale(Bimbo,center = minValue,scale = maxValue-minValue))
View(Bimbo1)
hist(Bimbo1$Volume)
ind<-sample(1:nrow(Bimbo),1950)
length(ind)
trainDF<-Bimbo[ind,]
trainBm<-Bimbo[ind,]
testBm<-Bimbo[-ind,]
dim(trainBm)
dim(testBm)
Bimbo1<-as.data.frame(scale(Bimbo,center = minValue,scale = maxValue-minValue))
ind<-sample(1:nrow(Bimbo1),1950)
length(ind)
trainBm<-Bimbo[ind,]
testBm<-Bimbo[-ind,]
dim(trainBm)
dim(testBm)
allVars<-colnames(Bimbo1)
allVars
predictorVarss<-allVars[!allVars%int%"Close"]
predictorVarss<-allVars[!allVars%in%"Close"]
predictorVarss
predictorVarss<-paste(predictorVarss,collapse = "+")
predictorVarss
neuralModel<-neuralnet(formula = form,hidden = c(4,2),linear.output = T,data = trainBm)
form=as.formula(paste("Close~",predictorVarss,collapse = "+"))
form
neuralModel<-neuralnet(formula = form,hidden = c(4,2),linear.output = T,data = trainBm)
plot(neuralModel)
neuralModel<-neuralnet(formula = form,hidden = c(4,2),linear.output = T,data = trainBm)
plot(neuralModel)
neuralModel<-neuralnet(formula = form,hidden = c(4,2),linear.output = T,data = trainBm)
plot(neuralModel)
form=as.formula(paste("Close~",predictorVarss,collapse = "+"))
form
neuralModel<-neuralnet(formula = form,hidden = c(4,2),linear.output = T,data = trainBm)
plot(neuralModel)
Bimbo1<-as.data.frame(scale(Bimbo,center = minValue,scale = maxValue-minValue))
ind<-sample(1:nrow(Bimbo1),1950)
length(ind)
trainBm<-Bimbo[ind,]
testBm<-Bimbo[-ind,]
predictorVarss<-allVars[!allVars%in%"Close"]
predictorVarss<-paste(predictorVarss,collapse = "+")
form=as.formula(paste("Close~",predictorVarss,collapse = "+"))
neuralModel<-neuralnet(formula = form,hidden = c(4,2),linear.output = T,data = trainBm)
plot(neuralModel)
predictions<-compute(neuralModel,testBm[,1:5])
str(predictions)
pred<-predictions$net.result
Bimbo<-as.data.frame(scale(Bimbo,center = minValue,scale = maxValue-minValue))
ind<-sample(1:nrow(Bimbo),1950)
length(ind)
trainBm<-Bimbo[ind,]
testBm<-Bimbo[-ind,]
allVars<-colnames(Bimbo)
allVars
predictorVarss<-allVars[!allVars%in%"Close"]
predictorVarss<-paste(predictorVarss,collapse = "+")
form=as.formula(paste("Close~",predictorVarss,collapse = "+"))
neuralModel<-neuralnet(formula = form,hidden = c(4,2),linear.output = T,data = trainBm)
plot(neuralModel)
predictions<-compute(neuralModel,testBm[,1:5])
str(predictions)
pred<-predictions$net.result
predictions<-pred*(max(testBm$Close))
predictions<-pred*(max(testBm$Close)-min(testBm$Close))+min(testBm$Close)
actualValues<-(testBm$Close)*(max(testBm$Close)-min(testBm$Close))+min(testBm$Close)
#Error minimo cuadrado
MSE<-sum((predictions-actualValues))
#Error minimo cuadrado
MSE<-sum((predictions-actualValues)^2/nrow(testBm))
MSE
?pch
plot(testBm$Close,predictions,col="red",main = "Reales vs Predecidos",pch=1,cex=0.9,type="p",xlab ="Actual",ylab="Predecido")
plot(testBm$Close,predictions,col="red",main = "Reales vs Predecidos",pch=1,cex=0.9,type="p",xlab ="Actual",ylab="Predecido")
plot(testBm$Close,predictions)
?plot
plot(testBm$Close,predictions)
plot(testBm$Close,predictions,col="red",main = "Reales vs Predecidos",pch=1,cex=0.9,type="p",xlab ="Actual",ylab="Predecido")
final<-(testBm$Close~predictions)
result<-(testBm+final)
result<-(te1$Close+final)
final<-(testBm$Close~predictions)
result<-(te1$Close+final)
te1$Close
final
final<-(testBm$Close-predictions)
result<-(te1$Close+final)
MSE
plot(neuralModel)
#Prediccion de los precios con base en las especificaciones del automovil.
rm(list=ls())
library(Hmisc)
library(psych)
library(car)
library(ggplot2)
library(rgl)
library(gridExtra)
library(scales)
#Definir el directorio de trabajo
setwd("C:/Users/lr_29/Desktop/Big Data Goal/R/Proyectos R Studio/Auto_Multi")
auto<-read.csv(file="automobile_data.csv",header=TRUE,na.strings = "?")
str(auto)
summary(auto)
head(auto)
View(auto)
auto$price<-as.numeric(impute(auto$price,mean))
auto$normalized.losses<-as.numeric(impute(auto$normalized.losses,mean))
auto$symboling<-as.numeric(impute(auto$symboling,median))
#Variables con valores faltantes
#Cuatro puertas ==> 1, Dos puertas ==>2
auto$num.of.doors<-as.numeric(impute(auto$num.of.doors,median))
auto$horsepower<-as.numeric(impute(auto$horsepower,mean))
auto$peak.rpm<-as.numeric(impute(auto$peak.rpm,mean))
auto$bore<-as.numeric(impute(auto$bore,mean))
auto$stroke<-as.numeric(impute(auto$stroke,mean))
summary(auto)
summary(auto)
summary(auto$price)
ggplot(auto,aes(x=horsepower,y=price))+
ggtitle("Caballos de fuerza vs Precio")+
geom_point(color="lightslateblue",size=1)+
stat_smooth(method = "lm",color="red",se=FALSE,fullrange = TRUE,size=0.5)
ggplot(auto,aes(x=engine.size,y=highway.mpg))+
ggtitle("Tamaño del motor vs Millas por galon")+
geom_point(color="darkgreen",size=1)+
stat_smooth(method = "lm",color="gold4",se=FALSE,fullrange = TRUE,size=1.5)
ggplot(auto,aes(x=highway.mpg,y=engine.size))+
ggtitle("Millas por galon vs Tamaño del motor")+
geom_point(color="darkgreen",size=1)+
stat_smooth(method = "lm",color="gold",se=FALSE,fullrange = TRUE,size=1)
ggplot(auto,aes(x=highway.mpg,y=engine.size))+
ggtitle("Millas por galon vs Tamaño del motor")+
labs(x="Millas por galon",y="Tamaño del motor")+
geom_point(color="darkgreen",size=1)+
stat_smooth(method = "lm",color="gold",se=FALSE,fullrange = TRUE,size=1)
ggplot(auto,aes(x=horsepower,y=price))+
ggtitle("Caballos de fuerza vs Precio")+
labs(x="HP",y="Precio")+
geom_point(color="lightslateblue",size=1)+
stat_smooth(method = "lm",color="red",se=FALSE,fullrange = TRUE,size=0.5)
#El modelo lineal se obtiene: precio=m*horsepower+b. y=mx+b.
ggplot(auto,aes(x=engine.size,y=horsepower))+
ggtitle("Tamaño del motor vs Caballos de fuerza")+
labs(x="Tamaño del motor",y="Caballos de fuerza")+
geom_point(color="midnightblue",size=1)+
stat_smooth(method = "lm",color="darkred",se=FALSE,fullrange = TRUE,size=1)
#Generacion de muestras para llevar a cabo el training.
set.seed(5)
sample.size<-0.7
s1<-auto[sample.int(length(auto$price),round(length(auto$price)*sample.size)),]
s2<-auto[sample.int(length(auto$price),round(length(auto$price)*sample.size)),]
s3<-auto[sample.int(length(auto$price),round(length(auto$price)*sample.size)),]
s4<-auto[sample.int(length(auto$price),round(length(auto$price)*sample.size)),]
s5<-auto[sample.int(length(auto$price),round(length(auto$price)*sample.size)),]
s6<-auto[sample.int(length(auto$price),round(length(auto$price)*sample.size)),]
View(s1)
?sample.int
p1 <- ggplot(auto, aes(x=horsepower, y=price)) + ggtitle("(P1) HP vs. Precio") +
geom_point(color="gold", size=2) + geom_point(data=s1, color="black", size=1.5) +
stat_smooth(method="lm", color="blue", se=FALSE, fullrange=TRUE, size=1, data=s1)
p2 <- ggplot(auto, aes(x=horsepower, y=price)) + ggtitle("(P2) HP vs. Precio") +
geom_point(color="green", size=2) + geom_point(data=s2, color="black", size=1.5) +
stat_smooth(method="lm", color="blue", se=FALSE, fullrange=TRUE, size=1, data=s2)
p3 <- ggplot(auto, aes(x=horsepower, y=price)) + ggtitle("(P3) HP vs. Precio") +
geom_point(color="red", size=2) + geom_point(data=s3, color="black", size=1.5) +
stat_smooth(method="lm", color="blue", se=FALSE, fullrange=TRUE, size=1, data=s3)
p4 <- ggplot(auto, aes(x=horsepower, y=price)) + ggtitle("(P4) HP vs. Precio") +
geom_point(color="deepskyblue", size=2) + geom_point(data=s4, color="black", size=1.5) +
stat_smooth(method="lm", color="blue", se=FALSE, fullrange=TRUE, size=1, data=s4)
p5 <- ggplot(auto, aes(x=horsepower, y=price)) + ggtitle("(P5) HP vs. Precio") +
geom_point(color="magenta", size=2) + geom_point(data=s5, color="black", size=1.5) +
stat_smooth(method="lm", color="blue", se=FALSE, fullrange=TRUE, size=1, data=s5)
p6 <- ggplot(auto, aes(x=horsepower, y=price)) + ggtitle("(P6) HP vs. Precio") +
geom_point(color="brown", size=2) + geom_point(data=s6, color="black", size=1.5) +
stat_smooth(method="lm", color="blue", se=FALSE, fullrange=TRUE, size=1, data=s6)
grid.arrange(p1, p2, p3, p4, p5, p6, ncol=2)
p1 <- ggplot(auto, aes(x=horsepower, y=price)) + ggtitle("(P1) HP vs. Precio") +
labs(x="Caballos de fuerza",y="Precio")+
geom_point(color="gold", size=2) + geom_point(data=s1, color="black", size=1.5) +
stat_smooth(method="lm", color="blue", se=FALSE, fullrange=TRUE, size=1, data=s1)
p2 <- ggplot(auto, aes(x=horsepower, y=price)) + ggtitle("(P2) HP vs. Precio") +
labs(x="Caballos de fuerza",y="Precio")+
geom_point(color="green", size=2) + geom_point(data=s2, color="black", size=1.5) +
stat_smooth(method="lm", color="blue", se=FALSE, fullrange=TRUE, size=1, data=s2)
p3 <- ggplot(auto, aes(x=horsepower, y=price)) + ggtitle("(P3) HP vs. Precio") +
labs(x="Caballos de fuerza",y="Precio")+
geom_point(color="red", size=2) + geom_point(data=s3, color="black", size=1.5) +
stat_smooth(method="lm", color="blue", se=FALSE, fullrange=TRUE, size=1, data=s3)
p4 <- ggplot(auto, aes(x=horsepower, y=price)) + ggtitle("(P4) HP vs. Precio") +
labs(x="Caballos de fuerza",y="Precio")+
geom_point(color="deepskyblue", size=2) + geom_point(data=s4, color="black", size=1.5) +
stat_smooth(method="lm", color="blue", se=FALSE, fullrange=TRUE, size=1, data=s4)
p5 <- ggplot(auto, aes(x=horsepower, y=price)) + ggtitle("(P5) HP vs. Precio") +
labs(x="Caballos de fuerza",y="Precio")+
geom_point(color="magenta", size=2) + geom_point(data=s5, color="black", size=1.5) +
stat_smooth(method="lm", color="blue", se=FALSE, fullrange=TRUE, size=1, data=s5)
p6 <- ggplot(auto, aes(x=horsepower, y=price)) + ggtitle("(P6) HP vs. Precio") +
labs(x="Caballos de fuerza",y="Precio")+
geom_point(color="brown", size=2) + geom_point(data=s6, color="black", size=1.5) +
stat_smooth(method="lm", color="blue", se=FALSE, fullrange=TRUE, size=1, data=s6)
grid.arrange(p1, p2, p3, p4, p5, p6, ncol=2)
ggplot(auto, aes(x=horsepower, y=price)) +
ggtitle("HP vs. Precio") +geom_hline(yintercept=mean(auto$price), color="black") +
geom_point(color="gray60", size=1) +
stat_smooth(method="lm", aes(colour = 'S1'),  se=FALSE, fullrange=TRUE, size=1, data=s1) +
stat_smooth(method="lm", aes(colour = 'S2'), se=FALSE, fullrange=TRUE, size=1, data=s2) +
stat_smooth(method="lm", aes(colour = 'S3'), se=FALSE, fullrange=TRUE, size=1, data=s3) +
stat_smooth(method="lm", aes(colour = 'S4'), se=FALSE, fullrange=TRUE, size=1, data=s4) +
stat_smooth(method="lm", aes(colour = 'S5'), se=FALSE, fullrange=TRUE, size=1, data=s5) +
stat_smooth(method="lm", aes(colour = 'S6'), se=FALSE, fullrange=TRUE, size=1, data=s6) +
stat_smooth(method="lm", aes(colour = 'S0') , se=FALSE, fullrange=TRUE, size=1) +
scale_colour_manual(values=c("S1"="gold", "S2"="red","S3"="khaki","S4"="blue",
"S5"="magenta","S6"="brown","S0"="green"))
ggplot(auto, aes(x=horsepower, y=price)) +
ggtitle("HP vs. Precio")+labs(x="Caballos de fuerza",y="Precio")+
geom_hline(yintercept=mean(auto$price), color="black") + geom_point(color="gray60", size=1) +
stat_smooth(method="lm", aes(colour = 'S1'),  se=FALSE, fullrange=TRUE, size=1, data=s1) +
stat_smooth(method="lm", aes(colour = 'S2'), se=FALSE, fullrange=TRUE, size=1, data=s2) +
stat_smooth(method="lm", aes(colour = 'S3'), se=FALSE, fullrange=TRUE, size=1, data=s3) +
stat_smooth(method="lm", aes(colour = 'S4'), se=FALSE, fullrange=TRUE, size=1, data=s4) +
stat_smooth(method="lm", aes(colour = 'S5'), se=FALSE, fullrange=TRUE, size=1, data=s5) +
stat_smooth(method="lm", aes(colour = 'S6'), se=FALSE, fullrange=TRUE, size=1, data=s6) +
stat_smooth(method="lm", aes(colour = 'S0') , se=FALSE, fullrange=TRUE, size=1) +
scale_colour_manual(values=c("S1"="gold", "S2"="red","S3"="khaki","S4"="blue",
"S5"="magenta","S6"="brown","S0"="green"))
ggplot(auto, aes(x=horsepower, y=price)) +
ggtitle("HP vs. Precio")+labs(x="Caballos de fuerza",y="Precio USD")+
geom_hline(yintercept=mean(auto$price), color="black") + geom_point(color="gray60", size=1) +
stat_smooth(method="lm", aes(colour = 'S1'),  se=FALSE, fullrange=TRUE, size=1, data=s1) +
stat_smooth(method="lm", aes(colour = 'S2'), se=FALSE, fullrange=TRUE, size=1, data=s2) +
stat_smooth(method="lm", aes(colour = 'S3'), se=FALSE, fullrange=TRUE, size=1, data=s3) +
stat_smooth(method="lm", aes(colour = 'S4'), se=FALSE, fullrange=TRUE, size=1, data=s4) +
stat_smooth(method="lm", aes(colour = 'S5'), se=FALSE, fullrange=TRUE, size=1, data=s5) +
stat_smooth(method="lm", aes(colour = 'S6'), se=FALSE, fullrange=TRUE, size=1, data=s6) +
stat_smooth(method="lm", aes(colour = 'S0') , se=FALSE, fullrange=TRUE, size=1) +
scale_colour_manual(values=c("S1"="gold", "S2"="red","S3"="khaki","S4"="blue",
"S5"="magenta","S6"="brown","S0"="green"))
ggplot(auto, aes(x=horsepower, y=price)) +
ggtitle("HP vs Precio") +labs(x="Caballos de fuerza",y="Precio USD")+
geom_point(color="gray", size=1) +
stat_smooth(method="lm", size=0.5, color="blue")
ggplot(auto, aes(x=normalized.losses, y=price)) +
ggtitle("Perdidas normalizadas vs Precio") +
geom_point(color="gray", size=1) +
stat_smooth(method="loess", size=0.5, color="red")
ggplot(auto, aes(x=horsepower, y=price)) +
ggtitle("HP vs Precio (Intervalo de confidencia)") +labs(x="Caballos de fuerza",y="Precio USD")+
geom_point(color="gray", size=1) +
stat_smooth(method="loess", size=0.5, color="blue")
ggplot(auto, aes(x=horsepower, y=price)) +
ggtitle("HP vs Precio (Intervalo de confidencia)") +labs(x="Caballos de fuerza",y="Precio USD")+
geom_point(color="gray", size=1) +
stat_smooth(method="loess", size=0.5, color="blue",se=FALSE)
ggplot(auto, aes(x=horsepower, y=price)) +
ggtitle("HP vs Precio (Intervalo de confidencia)") +labs(x="Caballos de fuerza",y="Precio USD")+
geom_point(color="gray", size=1) +
stat_smooth(method="loess", size=0.5, color="blue",se=FALSE, fullrange=TRUE)
ggplot(auto, aes(x=normalized.losses, y=price)) +
ggtitle("Perdidas normalizadas vs Precio") +
geom_point(color="gray", size=1) +
stat_smooth(method="loess", size=0.5, color="red")
ggplot(auto, aes(x=highway.mpg,y=engine.size)) +
ggtitle("Millas por galon vs Tamaño del motor") +
geom_point(color="gray", size=1) +
stat_smooth(method="loess", size=0.5, color="blue")
ggplot(auto, aes(x=horsepower, y=price)) +
ggtitle("HP vs Precio") +
geom_point(color="gray", size=1) +
stat_smooth(method="lm", size=0.5, color="blue") +
stat_smooth(method="loess", size=0.5, color="red")
ggplot(auto, aes(x=highway.mpg,y=engine.size)) +
ggtitle("Millas por galon vs Tamaño del motor") +labs(x="Millas por galon",y="Tamaño del motor")+
geom_point(color="gray", size=1) +
stat_smooth(method="lm", size=0.5, color="blue") +
stat_smooth(method="loess", size=0.5, color="red")
ggplot(auto, aes(x=highway.mpg,y=engine.size)) +
ggtitle("Millas por galon vs Tamaño del motor") +labs(x="Millas por galon",y="Tamaño del motor")+
geom_point(color="gray", size=1) +
stat_smooth(method="lm", aes(colour = 'Lineal'), size=0.5) +
stat_smooth(method="loess", aes(colour = 'LOESS'), size=0.5)+
scale_colour_manual(values=c("Lineal"="red", "LOESS"="blue"))
ggplot(auto, aes(x=highway.mpg,y=engine.size)) +
ggtitle("Millas por galon vs Tamaño del motor") +labs(x="Millas por galon",y="Tamaño del motor")+
geom_point(color="gray", size=1) +
stat_smooth(method="lm", aes(Modelo = 'Lineal'), size=0.5) +
stat_smooth(method="loess", aes(Modelo = 'LOESS'), size=0.5)+
scale_colour_manual(values=c("Lineal"="red", "LOESS"="blue"))
ggplot(auto, aes(x=highway.mpg,y=engine.size)) +
ggtitle("Millas por galon vs Tamaño del motor") +labs(x="Millas por galon",y="Tamaño del motor")+
geom_point(color="gray", size=1) +
stat_smooth(method="lm", aes(colour = 'Lineal'), size=0.5) +
stat_smooth(method="loess", aes(colour = 'LOESS'), size=0.5)+
scale_colour_manual(values=c("Lineal"="red", "LOESS"="blue"))
ggplot(auto, aes(x=highway.mpg,y=engine.size)) +
ggtitle("Modelo lineal vs LOESS") +labs(x="Millas por galon",y="Tamaño del motor")+
geom_point(color="gray", size=1) +
stat_smooth(method="lm", aes(colour = 'Lineal'), size=0.5) +
stat_smooth(method="loess", aes(colour = 'LOESS'), size=0.5)+
scale_colour_manual(values=c("Lineal"="red", "LOESS"="blue"))
set.seed(5)
train.size <- 0.7
train.index <- sample.int(length(auto$price), round(length(auto$price) * train.size))
train.sample <- auto[train.index,]
valid.sample <- auto[-train.index,] #Subconjunto para validacion
fit <- lm(price ~ horsepower, data=train.sample)
fit
train.sample$Pred.price <- predict(fit)
valid.sample$Pred.price <- predict(fit,newdata = subset(valid.sample, select=c(price, horsepower)))
# Detalles sobre la confiabilidad del modelo aplicado al subconjunto de entrenamiento.
summary(fit)
train.corr <- round(cor(train.sample$Pred.price, train.sample$price), 2)
train.RMSE <- round(sqrt(mean((train.sample$Pred.price - train.sample$price)^2)))
train.MAE <- round(mean(abs(train.sample$Pred.price - train.sample$price)))
c(train.corr^2, train.RMSE, train.MAE)
valid.corr <- round(cor(valid.sample$Pred.price, valid.sample$price), 2)
valid.RMSE <- round(sqrt(mean((valid.sample$Pred.price - valid.sample$price)^2)))
valid.MAE <- round(mean(abs(valid.sample$Pred.price - valid.sample$price)))
c(valid.corr^2, valid.RMSE, valid.MAE)
fit
ggplot(auto, aes(x=horsepower, y=price)) +
ggtitle("Potencia Motor vs precio") +
theme(legend.position='none') +
labs(x="Potencia (HP)", y="Precio ($)") +
geom_point(color="gray", size=1) +
stat_smooth(method="lm", color="darkgray", size=0.5) + # se=FALSE is no band is requied
xlim(min(train.sample$horsepower),
max(train.sample$horsepower)) +
geom_segment(data=data.frame(horsepower=valid.sample$horsepower,
price=valid.sample$Pred.price),
aes(x=valid.sample$horsepower, xend=valid.sample$horsepower,
y=valid.sample$price, yend=valid.sample$Pred.price,
color="orange"),
size=0.5) +
geom_point(data=data.frame(horsepower=valid.sample$horsepower,
price=valid.sample$price),
color="orange", size=1.5) +
geom_line(data=data.frame(horsepower=train.sample$horsepower,
price=train.sample$Pred.price),
color="blue", size=0.5)
library(Hmisc)
library(psych)
library(car)
library(ggplot2)
library(rgl)
library(gridExtra)
library(scales)
#Prediccion de los precios con base en las especificaciones del automovil.
rm(list=ls())
library(Hmisc)
library(psych)
library(car)
library(ggplot2)
library(rgl)
library(gridExtra)
library(scales)
#Definir el directorio de trabajo
setwd("C:/Users/lr_29/Desktop/Big Data Goal/R/Proyectos R Studio/Auto_Multi")
auto<-read.csv(file="automobile_data.csv",header=TRUE,na.strings = "?")
str(auto)
summary(auto)
head(auto)
View(auto)
auto$Price <- as.numeric(impute(auto$Price, mean))
auto$Normalized.losses <- as.numeric(impute(auto$Normalized.losses, mean))
auto$Num.of.doors <- as.numeric(impute(auto$Num.of.doors, median))
auto$Horsepower <- as.numeric(impute(auto$Horsepower, mean))
auto$Peak.rpm <- as.numeric(impute(auto$Peak.rpm, mean))
auto$Bore <- as.numeric(impute(auto$Bore, mean))
auto$Stroke <- as.numeric(impute(auto$Stroke, mean))
summary(auto)
auto$price<-as.numeric(impute(auto$price,mean))
auto$normalized.losses<-as.numeric(impute(auto$normalized.losses,mean))
auto$symboling<-as.numeric(impute(auto$symboling,median))
#Variables con valores faltantes
#Cuatro puertas ==> 1, Dos puertas ==>2
auto$num.of.doors<-as.numeric(impute(auto$num.of.doors,median))
auto$horsepower<-as.numeric(impute(auto$horsepower,mean))
auto$peak.rpm<-as.numeric(impute(auto$peak.rpm,mean))
auto$bore<-as.numeric(impute(auto$bore,mean))
auto$stroke<-as.numeric(impute(auto$stroke,mean))
summary(auto)
#Prediccion de los precios con base en las especificaciones del automovil.
rm(list=ls())
library(Hmisc)
library(psych)
library(car)
library(ggplot2)
library(rgl)
library(gridExtra)
library(scales)
#Definir el directorio de trabajo
setwd("C:/Users/lr_29/Desktop/Big Data Goal/R/Proyectos R Studio/Auto_Multi")
auto<-read.csv(file="automobile_data.csv",header=TRUE,na.strings = "?")
summary(auto)
auto$price<-as.numeric(impute(auto$price,mean))
auto$normalized.losses<-as.numeric(impute(auto$normalized.losses,mean))
auto$symboling<-as.numeric(impute(auto$symboling,median))
#Variables con valores faltantes
#Cuatro puertas ==> 1, Dos puertas ==>2
auto$num.of.doors<-as.numeric(impute(auto$num.of.doors,median))
auto$horsepower<-as.numeric(impute(auto$horsepower,mean))
auto$peak.rpm<-as.numeric(impute(auto$peak.rpm,mean))
auto$bore<-as.numeric(impute(auto$bore,mean))
auto$stroke<-as.numeric(impute(auto$stroke,mean))
summary(auto)
View(auto)
colnames(auto)
# Select a subset of numeric variables for regression modelling
auto.sel <- subset(auto, select = c(horsepower, city.mpg, peak.rpm, curb.weight, num.of.doors, price))
View(auto.sel)
# Inspeccion rapida de las variables involucradas.
pairs.panels(auto.sel, col="red")
# Se divide la información en un subconjunto de entrenamiento y validación.
# Subconjunto de entrenamiento (train.size)
# Subconjunto de validación (100-train.size)%.
set.seed(5)
train.size <- 0.8
train.index <- sample.int(length(auto.sel$price), round(length(auto.sel$price) * train.size))
train.sample <- auto.sel[train.index,]
valid.sample <- auto.sel[-train.index,]
View(train.sample)
fit <- lm(price ~ horsepower+city.mpg+peak.rpm+curb.weight+num.of.doors, data=train.sample)
summary(fit)
fit <- lm(price ~ horsepower+city.mpg+peak.rpm+curb.weight, data=train.sample)
summary(fit) # R2=73%
auto$Price
fit <- lm(price ~ horsepower+city.mpg+curb.weight, data=train.sample)
summary(fit) # R2=73%
fit <- lm(price ~ horsepower+curb.weight, data=train.sample)
summary(fit) # R2=72.7%
plot(fit)
plot(fit)
# Se encontraron valores extremos que pueden ser eliminados del modelo
train.sample[which(rownames(train.sample) %in% c("128", "17", "75")),] # c("167", "44", "91")
View(train.sample)
View(valid.sample)
train.sample$Pred.Price <- predict(fit,
newdata = subset(train.sample, select=c(price, horsepower, curb.weight)))
valid.sample$Pred.Price <- predict(fit,
newdata = subset(valid.sample, select=c(price, horsepower, curb.weight)))
# The theoretical model performance is defined here as R-Squared
summary(fit)
train.corr <- round(cor(train.sample$Pred.Price, train.sample$Price), 2)
train.RMSE <- round(sqrt(mean((train.sample$Pred.Price - train.sample$Price)^2)))
train.MAE <- round(mean(abs(train.sample$Pred.Price - train.sample$Price)))
c(train.corr^2, train.RMSE, train.MAE)
# Check how good is the model on the training set - correlation^2, RME and MAE
train.corr <- round(cor(train.sample$Pred.Price, train.sample$price), 2)
train.RMSE <- round(sqrt(mean((train.sample$Pred.Price - train.sample$price)^2)))
train.MAE <- round(mean(abs(train.sample$Pred.Price - train.sample$price)))
c(train.corr^2, train.RMSE, train.MAE)
# Check how good is the model on the validation set - correlation^2, RME and MAE
valid.corr <- round(cor(valid.sample$Pred.Price, valid.sample$price), 2)
valid.RMSE <- round(sqrt(mean((valid.sample$Pred.Price - valid.sample$price)^2)))
valid.MAE <- round(mean(abs(valid.sample$Pred.Price - valid.sample$price)))
c(valid.corr^2, valid.RMSE, valid.MAE)
